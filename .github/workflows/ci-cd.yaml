name: CI/CD Pipeline

on:
  pull_request:
    branches:
      - develop
      - main
  push:
    branches:
      - main

jobs:
  test:
    name: Testes e Verificação de Qualidade
    runs-on: ubuntu-latest

    steps:
      - name: Checkout do código
        uses: actions/checkout@v3

      - name: Configurar Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'

      - name: Instalar dependências
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: Verificar formatação com Black
        run: black --check src tests

      - name: Verificar com Ruff
        run: ruff check src tests

      - name: Executar testes
        run: |
          pytest

      - name: Verificar cobertura de testes (somente para main)
        if: (github.event_name == 'pull_request' && github.base_ref == 'main') || (github.ref == 'refs/heads/main')
        run: |
          pytest --cov=src tests/ --cov-report=term --cov-fail-under=50

      - name: Gerar relatório de cobertura básico (para develop)
        if: github.event_name == 'pull_request' && github.base_ref == 'develop'
        run: |
          pytest --cov=src tests/ --cov-report=xml

      - name: Gerar relatório de cobertura detalhado (para main)
        if: github.event_name == 'pull_request' && github.base_ref == 'main' || github.ref == 'refs/heads/main'
        run: |
          pytest --cov=src tests/ --cov-report=xml

      - name: Upload do relatório de cobertura para Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: ${{ github.base_ref == 'main' || github.ref == 'refs/heads/main' }}

      - name: Notificar equipe sobre testes no Discord
        if: success()
        run: |
          COMMIT_MESSAGE=$(git log -1 --pretty=format:"%s")
          COMMIT_AUTHOR=$(git log -1 --pretty=format:"%an")
          COMMIT_LINK="${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}"
          CURRENT_DATE=$(date '+%d/%m/%Y %H:%M:%S')
          
          curl -H "Content-Type: application/json" -d "{\"embeds\":[{\"title\":\"✅ Testes Concluídos com Sucesso!\",\"description\":\"Os testes e verificações de qualidade foram executados com sucesso.\",\"color\":3066993,\"fields\":[{\"name\":\"Repositório\",\"value\":\"[${{ github.repository }}](${{ github.server_url }}/${{ github.repository }})\",\"inline\":true},{\"name\":\"Branch\",\"value\":\"${{ github.ref_name }}\",\"inline\":true},{\"name\":\"Commit\",\"value\":\"[$COMMIT_MESSAGE]($COMMIT_LINK)\",\"inline\":false},{\"name\":\"Autor\",\"value\":\"$COMMIT_AUTHOR\",\"inline\":true},{\"name\":\"Concluído em\",\"value\":\"$CURRENT_DATE\",\"inline\":true}],\"footer\":{\"text\":\"TCC Detecção e Maturação de Frutas\"}}]}" ${{ secrets.DISCORD_WEBHOOK }}

      - name: Notificar falha nos testes no Discord
        if: failure()
        run: |
          COMMIT_MESSAGE=$(git log -1 --pretty=format:"%s")
          COMMIT_AUTHOR=$(git log -1 --pretty=format:"%an")
          COMMIT_LINK="${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}"
          CURRENT_DATE=$(date '+%d/%m/%Y %H:%M:%S')
          
          curl -H "Content-Type: application/json" -d "{\"embeds\":[{\"title\":\"❌ Falha nos Testes!\",\"description\":\"Os testes ou verificações de qualidade falharam. Verifique os logs para mais detalhes.\",\"color\":15158332,\"fields\":[{\"name\":\"Repositório\",\"value\":\"[${{ github.repository }}](${{ github.server_url }}/${{ github.repository }})\",\"inline\":true},{\"name\":\"Branch\",\"value\":\"${{ github.ref_name }}\",\"inline\":true},{\"name\":\"Commit\",\"value\":\"[$COMMIT_MESSAGE]($COMMIT_LINK)\",\"inline\":false},{\"name\":\"Autor\",\"value\":\"$COMMIT_AUTHOR\",\"inline\":true},{\"name\":\"Falhou em\",\"value\":\"$CURRENT_DATE\",\"inline\":true}],\"footer\":{\"text\":\"TCC Detecção e Maturação de Frutas\"}}]}" ${{ secrets.DISCORD_WEBHOOK }}

  build:
    name: Build e Validação
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout do código
        uses: actions/checkout@v3

      - name: Configurar Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'

      - name: Instalar dependências
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Validar estrutura do projeto
        run: |
          python -c "import src.app.main; print('✅ Importação da aplicação bem-sucedida')"
          python -c "from src.app.main import app; print('✅ Aplicação FastAPI inicializada')"

      - name: Verificar variáveis de ambiente
        run: |
          cp .env.template .env
          python -c "from src.app.config import settings; print('✅ Configurações carregadas')"

      - name: Notificar equipe sobre build no Discord
        if: success()
        run: |
          COMMIT_MESSAGE=$(git log -1 --pretty=format:"%s")
          COMMIT_AUTHOR=$(git log -1 --pretty=format:"%an")
          COMMIT_LINK="${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}"
          CURRENT_DATE=$(date '+%d/%m/%Y %H:%M:%S')
          
          curl -H "Content-Type: application/json" -d "{\"embeds\":[{\"title\":\"✅ Build Concluído com Sucesso!\",\"description\":\"O processo de build e validação foi concluído com sucesso.\",\"color\":3066993,\"fields\":[{\"name\":\"Repositório\",\"value\":\"[${{ github.repository }}](${{ github.server_url }}/${{ github.repository }})\",\"inline\":true},{\"name\":\"Branch\",\"value\":\"${{ github.ref_name }}\",\"inline\":true},{\"name\":\"Commit\",\"value\":\"[$COMMIT_MESSAGE]($COMMIT_LINK)\",\"inline\":false},{\"name\":\"Autor\",\"value\":\"$COMMIT_AUTHOR\",\"inline\":true},{\"name\":\"Concluído em\",\"value\":\"$CURRENT_DATE\",\"inline\":true}],\"footer\":{\"text\":\"TCC Detecção e Maturação de Frutas\"}}]}" ${{ secrets.DISCORD_WEBHOOK }}
      
      - name: Notificar falha no build no Discord
        if: failure()
        run: |
          COMMIT_MESSAGE=$(git log -1 --pretty=format:"%s")
          COMMIT_AUTHOR=$(git log -1 --pretty=format:"%an")
          COMMIT_LINK="${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}"
          CURRENT_DATE=$(date '+%d/%m/%Y %H:%M:%S')
          
          curl -H "Content-Type: application/json" -d "{\"embeds\":[{\"title\":\"❌ Falha no Build!\",\"description\":\"O processo de build e validação falhou. Verifique os logs para mais detalhes.\",\"color\":15158332,\"fields\":[{\"name\":\"Repositório\",\"value\":\"[${{ github.repository }}](${{ github.server_url }}/${{ github.repository }})\",\"inline\":true},{\"name\":\"Branch\",\"value\":\"${{ github.ref_name }}\",\"inline\":true},{\"name\":\"Commit\",\"value\":\"[$COMMIT_MESSAGE]($COMMIT_LINK)\",\"inline\":false},{\"name\":\"Autor\",\"value\":\"$COMMIT_AUTHOR\",\"inline\":true},{\"name\":\"Falhou em\",\"value\":\"$CURRENT_DATE\",\"inline\":true}],\"footer\":{\"text\":\"TCC Detecção e Maturação de Frutas\"}}]}" ${{ secrets.DISCORD_WEBHOOK }}

  deploy:
    name: Deploy para AWS Lambda
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout do código
        uses: actions/checkout@v3

      - name: Configurar Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'

      - name: Instalar dependências
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Configurar AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Criar pacote de implantação
        run: |
          mkdir -p deployment
          cp -r src deployment/
          cp requirements.txt deployment/
          cd deployment && zip -r ../lambda_package.zip .

      - name: Implantar função Lambda
        run: |
          aws lambda update-function-code \
            --function-name tcc-lambda-prod \
            --zip-file fileb://lambda_package.zip

      - name: Verificar implantação
        run: |
          aws lambda wait function-updated --function-name tcc-lambda-prod
          aws lambda get-function --function-name tcc-lambda-prod --query 'Configuration.LastUpdateStatus'

      - name: Notificar equipe sobre implantação no Discord
        if: success()
        run: |
          COMMIT_MESSAGE=$(git log -1 --pretty=format:"%s")
          COMMIT_AUTHOR=$(git log -1 --pretty=format:"%an")
          COMMIT_LINK="${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}"
          CURRENT_DATE=$(date '+%d/%m/%Y %H:%M:%S')
          
          curl -H "Content-Type: application/json" -d "{\"embeds\":[{\"title\":\"✅ Deploy Concluído com Sucesso!\",\"description\":\"A função Lambda \\`tcc-lambda-prod\\` foi atualizada com sucesso.\",\"color\":3066993,\"fields\":[{\"name\":\"Repositório\",\"value\":\"[${{ github.repository }}](${{ github.server_url }}/${{ github.repository }})\",\"inline\":true},{\"name\":\"Branch\",\"value\":\"main\",\"inline\":true},{\"name\":\"Commit\",\"value\":\"[$COMMIT_MESSAGE]($COMMIT_LINK)\",\"inline\":false},{\"name\":\"Autor\",\"value\":\"$COMMIT_AUTHOR\",\"inline\":true},{\"name\":\"Implantado em\",\"value\":\"$CURRENT_DATE\",\"inline\":true}],\"footer\":{\"text\":\"TCC Detecção e Maturação de Frutas\"}}]}" ${{ secrets.DISCORD_WEBHOOK }}

      - name: Notificar falha na implantação no Discord
        if: failure()
        run: |
          COMMIT_MESSAGE=$(git log -1 --pretty=format:"%s")
          COMMIT_AUTHOR=$(git log -1 --pretty=format:"%an")
          COMMIT_LINK="${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}"
          CURRENT_DATE=$(date '+%d/%m/%Y %H:%M:%S')
          
          curl -H "Content-Type: application/json" -d "{\"embeds\":[{\"title\":\"❌ Falha no Deploy!\",\"description\":\"A implantação da função Lambda \\`tcc-lambda-prod\\` falhou. Verifique os logs para mais detalhes.\",\"color\":15158332,\"fields\":[{\"name\":\"Repositório\",\"value\":\"[${{ github.repository }}](${{ github.server_url }}/${{ github.repository }})\",\"inline\":true},{\"name\":\"Branch\",\"value\":\"main\",\"inline\":true},{\"name\":\"Commit\",\"value\":\"[$COMMIT_MESSAGE]($COMMIT_LINK)\",\"inline\":false},{\"name\":\"Autor\",\"value\":\"$COMMIT_AUTHOR\",\"inline\":true},{\"name\":\"Falhou em\",\"value\":\"$CURRENT_DATE\",\"inline\":true}],\"footer\":{\"text\":\"TCC Detecção e Maturação de Frutas\"}}]}" ${{ secrets.DISCORD_WEBHOOK }}